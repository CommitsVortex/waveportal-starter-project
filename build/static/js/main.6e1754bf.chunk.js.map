{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractAddress","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","console","log","useEffect","onNewWave","from","prevState","on","off","abi","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","className","role","aria-label","name","placeholder","type","id","value","onChange","e","target","onClick","index","key","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e1754bf.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport './App.css';\r\nimport abi from \"./utils/WavePortal.json\";\r\n\r\nconst App = () => {\r\n  // State variable to store user's public wallet\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const contractAddress = \"0x04FEd9Ddb831999693C940D9c614a8D6De2eB813\";\r\n  \r\n  // Method that will get all waves from contract\r\n  const getAllWaves = async () => {\r\n    const { ethereum } = window;\r\n\r\n    try {\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        \r\n        // call the getAllWaves method from the smart contract\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n        // select address, timestamp, and message for UI\r\n        const wavesCleaned = waves.map(wave => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          }\r\n        });\r\n\r\n        // store data in React State\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let wavePortalContract;\r\n\r\n    const onNewWave = (from, timestamp, message) => {\r\n      console.log(\"NewState\", from, timestamp, message);\r\n      setAllWaves(prevState => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n      wavePortalContract.on(\"NewWave\", onNewWave);\r\n    }\r\n\r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  // clicking the wave button that triggeres contractABI\r\n  // will cause the web client to be reading data from the contract\r\n  // on the blockchain\r\n  const contractABI = abi.abi\r\n  \r\n  const checkIfWalletIsConnected = async () => {    \r\n    try {\r\n      // First make sure the user has access to window.ethereum\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      // Check authorization to acces user's wallet\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !==0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // Connect Wallet Function\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);    \r\n    } catch (error)  {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // call getTotalWaves() from the smart contract on this website\r\n  const wave = async () => {\r\n    try {\r\n      const {ethereum} = window;\r\n\r\n      if (ethereum) {\r\n        // ethere is a library that lets the frontend talk to the contract\r\n        // provider talks to ethereum nodes\r\n        // using nodes that metamask provides in background to send/receive data\r\n        // from deployed contract\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        // a signer in ethers is an abstraction of an ethereum account, used to sign messages and transcations\r\n        // executes state changing operations\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        // Execute the actual wave from the smart contract\r\n        // this logs that the writing to the contract is being minted\r\n        const waveTxn = await wavePortalContract.wave(message, { gasLimit: 300000 });\r\n        console.log(\"Mining -- \", waveTxn.hash);\r\n\r\n        // This logs that the transaction/write has been minted\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        // Return new wave count\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Restrieved total wave count...\", count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // This runs our function when the page loads\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getAllWaves();\r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n          <span role=\"img\" aria-label=\"Wave emoji\">ðŸ‘‹</span> Hey there!!!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          I am Committs Vortex and I will transform your waves into sweat or tears. Connect your Ethereum wallet and holler at me!\r\n        </div>\r\n\r\n        {/* <form className=\"dataContainer\">\r\n          <label className=\"bio\">Send a wave message:</label><br></br>\r\n          <input type=\"text\" id=\"waveMessage\" name=\"waveMessage\" defaultValue=\"ðŸ‘‹ \" className=\"waveEntry\"></input><br></br>\r\n          <input type=\"submit\" value=\"Wave to me on-chain\" className=\"waveButton\" onClick={wave}></input><br></br>\r\n        </form> */}\r\n\r\n        {\r\n          currentAccount ? (<textarea name=\"messageArea\"\r\n            placeholder=\"ðŸ‘‹ \"\r\n            type=\"text\"\r\n            id=\"msg\"\r\n            value={message}\r\n            onChange={e => setMessage(e.target.value)} />) : null\r\n        }\r\n        \r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n\r\n        {/* If there is no Current Account render this button */}\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n        \r\n        <div className=\"waveLogs\">\r\n          {allWaves.map((wave, index) => {\r\n            return (\r\n              <div key={index} className=\"logs\">\r\n                <div>Address: {wave.address}</div>\r\n                <div>Time: {wave.timestamp.toString()}</div>\r\n                <div>Message: {wave.message}</div>\r\n              </div>)\r\n          })}\r\n        </div>\r\n        \r\n        <div className=\"dataContainer\">\r\n          {/* <h1>`this is the wave address: {allWaves.Address[0]}`</h1> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}